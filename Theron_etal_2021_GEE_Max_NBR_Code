// Link to the Google Earth Engine Code: https://code.earthengine.google.com/92825569b0f3a621fea191575d583056?noload=true

// Define function to get and rename bands of interest from OLI
function renameOLI(img) {
  return img.select(
		['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'pixel_qa'],
		['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']
	);
}
// Define function to mask out clouds and cloud shadows.
function fmask(img) {
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  var qa = img.select('pixel_qa');
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
    .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return img.updateMask(mask);
}
// Define function to calculate NBR.
function calcNBR(img) {
  return img.normalizedDifference(['NIR', 'SWIR2']).rename('NBR');
}
// Define function to prepare OLI images
function prepOli(img) {
  var orig = img;
  img = renameOLI(img);
  img = fmask(img);
  img = calcNBR(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}
// Define quality filter
var colFilter = ee.Filter.and(
  ee.Filter.bounds(AOI),
  ee.Filter.lt('CLOUD_COVER', 70),
  ee.Filter.lt('GEOMETRIC_RMSE_MODEL', 10),
  ee.Filter.or(
    ee.Filter.eq('IMAGE_QUALITY', 9),
    ee.Filter.eq('IMAGE_QUALITY_OLI', 9)
  )
);
// Load image collections
var Lansat8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filterDate('2017-01-01', '2020-03-31').filter(colFilter).map(prepOli);

// Save Man NBR
var quality = Lansat8.max();
Export.image.toDrive({
  image: quality,
  description: "Min_NBR_2017_2020",
  region: AOI,
  fileFormat: 'GeoTIFF',
  scale: 30,
  crs: "EPSG:32736"
});
